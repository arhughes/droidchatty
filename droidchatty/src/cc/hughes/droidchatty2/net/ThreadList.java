// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: c:\apps\protoc\message.proto
package cc.hughes.droidchatty2.net;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class ThreadList extends Message {

  public static final List<RootPost> DEFAULT_THREAD = Collections.emptyList();

  @ProtoField(tag = 1, label = REPEATED)
  public final List<RootPost> thread;

  private ThreadList(Builder builder) {
    super(builder);
    this.thread = immutableCopyOf(builder.thread);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ThreadList)) return false;
    return equals(thread, ((ThreadList) other).thread);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    return result != 0 ? result : (hashCode = thread != null ? thread.hashCode() : 0);
  }

  public static final class Builder extends Message.Builder<ThreadList> {

    public List<RootPost> thread;

    public Builder() {
    }

    public Builder(ThreadList message) {
      super(message);
      if (message == null) return;
      this.thread = copyOf(message.thread);
    }

    public Builder thread(List<RootPost> thread) {
      this.thread = thread;
      return this;
    }

    @Override
    public ThreadList build() {
      return new ThreadList(this);
    }
  }

  public static final class RootPost extends Message {

    public static final String DEFAULT_ID = "";
    public static final String DEFAULT_AUTHOR = "";
    public static final String DEFAULT_DATE = "";
    public static final Integer DEFAULT_REPLIES = 0;
    public static final Boolean DEFAULT_REPLIED = false;
    public static final String DEFAULT_CATEGORY = "";
    public static final String DEFAULT_BODY = "";

    @ProtoField(tag = 1, type = STRING, label = REQUIRED)
    public final String id;

    @ProtoField(tag = 2, type = STRING, label = REQUIRED)
    public final String author;

    @ProtoField(tag = 3, type = STRING, label = REQUIRED)
    public final String date;

    @ProtoField(tag = 4, type = INT32, label = REQUIRED)
    public final Integer replies;

    @ProtoField(tag = 5, type = BOOL, label = REQUIRED)
    public final Boolean replied;

    @ProtoField(tag = 6, type = STRING, label = REQUIRED)
    public final String category;

    @ProtoField(tag = 7, type = STRING, label = REQUIRED)
    public final String body;

    private RootPost(Builder builder) {
      super(builder);
      this.id = builder.id;
      this.author = builder.author;
      this.date = builder.date;
      this.replies = builder.replies;
      this.replied = builder.replied;
      this.category = builder.category;
      this.body = builder.body;
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof RootPost)) return false;
      RootPost o = (RootPost) other;
      return equals(id, o.id)
          && equals(author, o.author)
          && equals(date, o.date)
          && equals(replies, o.replies)
          && equals(replied, o.replied)
          && equals(category, o.category)
          && equals(body, o.body);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      if (result == 0) {
        result = id != null ? id.hashCode() : 0;
        result = result * 37 + (author != null ? author.hashCode() : 0);
        result = result * 37 + (date != null ? date.hashCode() : 0);
        result = result * 37 + (replies != null ? replies.hashCode() : 0);
        result = result * 37 + (replied != null ? replied.hashCode() : 0);
        result = result * 37 + (category != null ? category.hashCode() : 0);
        result = result * 37 + (body != null ? body.hashCode() : 0);
        hashCode = result;
      }
      return result;
    }

    public static final class Builder extends Message.Builder<RootPost> {

      public String id;
      public String author;
      public String date;
      public Integer replies;
      public Boolean replied;
      public String category;
      public String body;

      public Builder() {
      }

      public Builder(RootPost message) {
        super(message);
        if (message == null) return;
        this.id = message.id;
        this.author = message.author;
        this.date = message.date;
        this.replies = message.replies;
        this.replied = message.replied;
        this.category = message.category;
        this.body = message.body;
      }

      public Builder id(String id) {
        this.id = id;
        return this;
      }

      public Builder author(String author) {
        this.author = author;
        return this;
      }

      public Builder date(String date) {
        this.date = date;
        return this;
      }

      public Builder replies(Integer replies) {
        this.replies = replies;
        return this;
      }

      public Builder replied(Boolean replied) {
        this.replied = replied;
        return this;
      }

      public Builder category(String category) {
        this.category = category;
        return this;
      }

      public Builder body(String body) {
        this.body = body;
        return this;
      }

      @Override
      public RootPost build() {
        checkRequiredFields();
        return new RootPost(this);
      }
    }
  }
}
